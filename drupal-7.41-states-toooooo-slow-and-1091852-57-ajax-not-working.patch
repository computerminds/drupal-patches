diff --git a/misc/states.js b/misc/states.js
index 5aac65d20c..27bb8fa3d1 100644
--- a/misc/states.js
+++ b/misc/states.js
@@ -1,5 +1,17 @@
 (function ($) {
 
+  // We define the following:
+  //   <  jQuery v1.9.1  OLD
+  //   >= jQuery v1.9.1  NEW
+  var jqueryversion = 'old';
+  var vernums = $.fn.jquery.split('.');
+  vernums[0] = parseInt(vernums[0], 10);
+  vernums[1] = parseInt(vernums[1], 10);
+  vernums[2] = parseInt(vernums[2], 10);
+  if (vernums[0] >= 2 || (vernums[0] == 1 && vernums[1] == 9 && vernums[2] >= 1)) {
+    jqueryversion = 'new';
+  }
+
 /**
  * The base States namespace.
  *
@@ -52,6 +64,8 @@ states.Dependent = function (args) {
   for (var selector in this.dependees) {
     this.initializeDependee(selector, this.dependees[selector]);
   }
+  // Reevaluate to execute initial states.
+  this.reevaluate();
 };
 
 /**
@@ -106,12 +120,25 @@ states.Dependent.prototype = {
         this.values[selector][state.name] = null;
 
         // Monitor state changes of the specified state for this dependee.
-        $(selector).bind('state:' + state, $.proxy(function (e) {
+        $dependee = $(selector);
+        $dependee.bind('state:' + state, $.proxy(function (e) {
           this.update(selector, state, e.value);
         }, this));
+        // We also monitor the document monitor the state of the dependee.
+        $(document).bind('state:' + state, $.proxy(function (e) {
+          // Must have our special event, and we must match our selector.
+          if ((e.states_target != null) && ($(e.states_target).is(selector))) {
+            this.update(selector, state, e.value);
+          }
+        }, this));
 
         // Make sure the event we just bound ourselves to is actually fired.
         new states.Trigger({ selector: selector, state: state });
+
+        // Update initial state value, if set by data attribute.
+        if (typeof $dependee.data() !== 'undefined' && $dependee.data() !== null && $dependee.data().hasOwnProperty('trigger:' + state.name)) {
+          this.values[selector][state.name] = $dependee.data('trigger:' + state.name);
+        }
       }
     }
   },
@@ -177,7 +204,21 @@ states.Dependent.prototype = {
 
       // By adding "trigger: true", we ensure that state changes don't go into
       // infinite loops.
-      this.element.trigger({ type: 'state:' + this.state, value: value, trigger: true });
+      if (jqueryversion == 'new') {
+        this.element.triggerHandler({ type: 'state:' + this.state, value: value, trigger: true });
+      }
+      else {
+        var event = jQuery.Event('state:' + this.state);
+        event.value = value;
+        event.trigger = true;
+        event.preventDefault();
+        event.stopPropagation();
+        this.element.trigger(event);
+      }
+      // The element may have been removed from the DOM.
+      if (typeof this.element.get(0) !== 'undefined') {
+        $(document).trigger({ type: 'state:' + this.state, value: value, trigger: true, states_target: this.element.get(0) });
+      }
     }
   },
 
@@ -308,7 +349,7 @@ states.Trigger = function (args) {
 
     // Only call the trigger initializer when it wasn't yet attached to this
     // element. Otherwise we'd end up with duplicate events.
-    if (!this.element.data('trigger:' + this.state)) {
+    if (typeof this.element.data() !== 'undefined' && this.element.data() !== null && !this.element.data().hasOwnProperty('trigger:' + this.state)) {
       this.initialize();
     }
   }
@@ -319,7 +360,10 @@ states.Trigger.prototype = {
     var trigger = states.Trigger.states[this.state];
 
     if (typeof trigger == 'function') {
-      // We have a custom trigger initialization function.
+      // Create data attribute for trigger, to prevent multiple
+      // calls to this method.
+      this.element.data('trigger:' + this.state, null);
+      // Call custom trigger initialization function.
       trigger.call(window, this.element);
     }
     else {
@@ -329,28 +373,38 @@ states.Trigger.prototype = {
         }
       }
     }
-
-    // Mark this trigger as initialized for this element.
-    this.element.data('trigger:' + this.state, true);
   },
 
   defaultTrigger: function (event, valueFn) {
     var oldValue = valueFn.call(this.element);
 
+    // Save current value to element data attribute.
+    this.element.data('trigger:' + this.state, oldValue);
     // Attach the event callback.
     this.element.bind(event, $.proxy(function (e) {
       var value = valueFn.call(this.element, e);
       // Only trigger the event if the value has actually changed.
       if (oldValue !== value) {
-        this.element.trigger({ type: 'state:' + this.state, value: value, oldValue: oldValue });
+        if (jqueryversion == 'new') {
+          this.element.triggerHandler({ type: 'state:' + this.state, value: value, oldValue: oldValue });
+        }
+        else {
+          var event = jQuery.Event('state:' + this.state);
+          event.value = value;
+          event.oldValue = oldValue;
+          event.preventDefault();
+          event.stopPropagation();
+          this.element.trigger(event);
+        }
+        // The element may have been removed from the DOM.
+        if (typeof this.element.get(0) !== 'undefined') {
+          $(document).trigger({ type: 'state:' + this.state, value: value, oldValue: oldValue, states_target: this.element.get(0) });
+        }
         oldValue = value;
+        // Save current value to element data attribute.
+        this.element.data('trigger:' + this.state, value);
       }
     }, this));
-
-    states.postponed.push($.proxy(function () {
-      // Trigger the event once for initialization purposes.
-      this.element.trigger({ type: 'state:' + this.state, value: oldValue, oldValue: null });
-    }, this));
   }
 };
 
@@ -480,6 +534,7 @@ $(document).bind('state:disabled', function(e) {
   // Only act when this change was triggered by a dependency and not by the
   // element monitoring itself.
   if (e.trigger) {
+    e.target = e.states_target || e.target;
     $(e.target)
       .attr('disabled', e.value)
         .closest('.form-item, .form-submit, .form-wrapper').toggleClass('form-disabled', e.value)
@@ -492,6 +547,7 @@ $(document).bind('state:disabled', function(e) {
 
 $(document).bind('state:required', function(e) {
   if (e.trigger) {
+    e.target = e.states_target || e.target;
     if (e.value) {
       var $label = $(e.target).closest('.form-item, .form-wrapper').find('label');
       // Avoids duplicate required markers on initialization.
@@ -507,18 +563,21 @@ $(document).bind('state:required', function(e) {
 
 $(document).bind('state:visible', function(e) {
   if (e.trigger) {
+      e.target = e.states_target || e.target;
       $(e.target).closest('.form-item, .form-submit, .form-wrapper').toggle(e.value);
   }
 });
 
 $(document).bind('state:checked', function(e) {
   if (e.trigger) {
+    e.target = e.states_target || e.target;
     $(e.target).attr('checked', e.value);
   }
 });
 
 $(document).bind('state:collapsed', function(e) {
   if (e.trigger) {
+    e.target = e.states_target || e.target;
     if ($(e.target).is('.collapsed') !== e.value) {
       $('> legend a', e.target).click();
     }
