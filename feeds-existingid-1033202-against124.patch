diff --git a/plugins/FeedsEntityProcessor.inc b/plugins/FeedsEntityProcessor.inc
index eb3f300..0b2658b 100644
--- a/plugins/FeedsEntityProcessor.inc
+++ b/plugins/FeedsEntityProcessor.inc
@@ -217,8 +217,44 @@ class FeedsEntityProcessor extends FeedsProcessor {
     // Let other modules expose mapping targets.
     self::loadMappers();
     $type = $this->entityType();
-    // drupal_alter('feeds_processor_targets', $targets, $type, $info['bundle']);
+    drupal_alter('feeds_processor_targets', $targets, $type, $info['bundle']);
 
     return $targets;
   }
+
+  /**
+   * Get Entity id of an existing feed item entity if available.
+   */
+  protected function existingEntityId(FeedsSource $source, FeedsParserResult $result) {
+    if ($entity_id = parent::existingEntityId($source, $result)) {
+      return $entity_id;
+    }
+
+    $entity_info = entity_get_info($this->entityType());
+    // Iterate through all unique targets and test whether they do already
+    // exist in the database.
+    foreach ($this->uniqueTargets($source, $result) as $target => $value) {
+      switch ($target) {
+        case 'id':
+          // This is our best guess at a quick entitytype-generic way of testing
+          // if the entity ID already exists, but the 'entity keys' property
+          // isn't necessarily the DB column that the entity ID will be stored
+          // in for all entity types. We could use entity_load_single() but that
+          // is expensive.
+          if (db_field_exists($entity_info['base table'], $entity_info['entity keys']['id'])) {
+            $entity_id = db_select($entity_info['base table'], 'bt')
+              ->fields('bt', array($entity_info['entity keys']['id']))
+              ->condition($entity_info['entity keys']['id'], $value)
+              ->execute()
+              ->fetchField();
+          }
+          break;
+      }
+      if ($entity_id) {
+        // Return with the first entity id found.
+        return $entity_id;
+      }
+    }
+    return 0;
+  }
 }
\ No newline at end of file
diff --git a/plugins/FeedsProcessor.inc b/plugins/FeedsProcessor.inc
index 9ec0c4c..5004407 100755
--- a/plugins/FeedsProcessor.inc
+++ b/plugins/FeedsProcessor.inc
@@ -409,11 +409,22 @@ abstract class FeedsProcessor extends FeedsPlugin {
     // need to clear target elements of each item before mapping in case we are
     // mapping on a prepopulated item such as an existing node.
     foreach ($this->config['mappings'] as $mapping) {
-      if (isset($targets[$this->id][$mapping['target']]['real_target'])) {
-        unset($target_item->{$targets[$this->id][$mapping['target']]['real_target']});
+      if (isset($this->targets[$mapping['target']]['real_target'])) {
+        $real_target = $this->targets[$mapping['target']]['real_target'];
+        if (isset($target_item->{$real_target}) && is_array($target_item->{$real_target})) {
+          $target_item->{$real_target} = array();
+        }
+        else {
+          unset($target_item->{$real_target});
+        }
       }
       elseif (isset($target_item->{$mapping['target']})) {
-        unset($target_item->{$mapping['target']});
+        if (is_array($target_item->{$mapping['target']})) {
+          $target_item->{$mapping['target']} = array();
+        }
+        else {
+          unset($target_item->{$mapping['target']});
+        }
       }
     }
 
